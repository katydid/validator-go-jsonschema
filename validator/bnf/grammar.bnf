AllGrammar
  : Grammar
  | GrammarWithEndingSpace
  ;

Grammar
  : Pattern                     << &Grammar{TopPattern: $0.(*Pattern)}, nil >>  
  | Pattern PatternDecls        << &Grammar{TopPattern: $0.(*Pattern), PatternDecls: $1.([]*PatternDecl)}, nil >>
  | PatternDecls                << &Grammar{PatternDecls:$0.([]*PatternDecl)}, nil >>
  ;

GrammarWithEndingSpace
  : Pattern Space               << &Grammar{TopPattern: $0.(*Pattern), After: $1.(*Space)}, nil >>
  | Pattern PatternDecls Space  << &Grammar{TopPattern: $0.(*Pattern), PatternDecls: $1.([]*PatternDecl), After: $2.(*Space)}, nil >>
  | PatternDecls Space          << &Grammar{PatternDecls: $0.([]*PatternDecl), After: $1.(*Space)}, nil >>
  ;

PatternDecls
  : PatternDecl               << []*PatternDecl{$0.(*PatternDecl)}, nil >>
  | PatternDecls PatternDecl  << append($0.([]*PatternDecl), $1.(*PatternDecl)), nil >>
  ;

PatternDecl
  : Hash Space id Equal Pattern
  <<
    &PatternDecl{
      Hash: $0.(*Keyword),
      Before: $1.(*Space),
      Name: newString($2),
      Eq: $3.(*Keyword),
      Pattern: $4.(*Pattern),
    }, nil
  >>
  | Hash id Equal Pattern
  <<
    &PatternDecl{
      Hash: $0.(*Keyword),
      Name: newString($1),
      Eq: $2.(*Keyword),
      Pattern: $3.(*Pattern),
    }, nil
  >>
  ;

Empty
  : "<empty>" << &Keyword{Value: "<empty>"}, nil >>
  | Space "<empty>" << 
    &Keyword{
      Before: $0.(*Space),
      Value: "<empty>",
    }, nil
  >>
  ;

DepthPattern
  : StartConcat
  | StartInterleave
  | Dot Pattern << &Pattern{Contains: &Contains{
      Dot: $0.(*Keyword),
      Pattern: $1.(*Pattern),
    }}, nil
  >>
  | AllExpr <<
    &Pattern{LeafNode: &LeafNode{
        Expr: $0.(*Expr),
    }}, nil
  >>
  ;

TreeNode
  : NameExpr Colon Pattern <<
    &Pattern{TreeNode: &TreeNode{
      Name: $0.(*NameExpr),
      Colon: $1.(*Keyword),
      Pattern: $2.(*Pattern),
    }}, nil
  >>
  | NameExpr DepthPattern <<
    &Pattern{TreeNode: &TreeNode{
      Name: $0.(*NameExpr),
      Pattern: $1.(*Pattern),
    }}, nil
  >>
  ;

Pattern
  : Empty << &Pattern{Empty: &Empty{Empty: $0.(*Keyword)}}, nil >>
  | Star   << &Pattern{ZAny: &ZAny{Star: $0.(*Keyword)}}, nil >>
  | TreeNode
  | DepthPattern
  | StartOr
  | StartAnd
  | OpenParen Pattern CloseParen Star <<
    &Pattern{ZeroOrMore: &ZeroOrMore{
      OpenParen: $0.(*Keyword),
      Pattern: $1.(*Pattern),
      CloseParen: $2.(*Keyword),
      Star: $3.(*Keyword),
    }}, nil
  >>
  | OpenParen Pattern CloseParen QuestionMark <<
    &Pattern{Optional: &Optional{
      OpenParen: $0.(*Keyword),
      Pattern: $1.(*Pattern),
      CloseParen: $2.(*Keyword),
      QuestionMark: $3.(*Keyword),
    }}, nil
  >>
  | At id <<
    &Pattern{Reference: &Reference{
      At: $0.(*Keyword),
      Name: newString($1),
    }}, nil
  >>
  | Exclamation OpenParen Pattern CloseParen <<
    &Pattern{Not: &Not{
      Exclamation: $0.(*Keyword),
      OpenParen: $1.(*Keyword),
      Pattern: $2.(*Pattern),
      CloseParen: $3.(*Keyword),
    }}, nil
  >>
  ;

StartConcat
  : OpenBracket Pattern Comma ContinueConcat CloseBracket <<
    &Pattern{Concat: &Concat{
      OpenBracket: $0.(*Keyword),
      LeftPattern: $1.(*Pattern),
      Comma: $2.(*Keyword),
      RightPattern: $3.(*Pattern),
      CloseBracket: $4.(*Keyword),
    }}, nil
  >>
  | OpenBracket Pattern Comma ContinueConcat Comma CloseBracket <<
    &Pattern{Concat: &Concat{
      OpenBracket: $0.(*Keyword),
      LeftPattern: $1.(*Pattern),
      Comma: $2.(*Keyword),
      RightPattern: $3.(*Pattern),
      ExtraComma: $4.(*Keyword),
      CloseBracket: $5.(*Keyword),
    }}, nil
  >>
  ;

ContinueConcat
  : Pattern
  | ContinueConcat Comma Pattern <<
    &Pattern{Concat: &Concat{
      LeftPattern: $0.(*Pattern),
      Comma: $1.(*Keyword),
      RightPattern: $2.(*Pattern),
    }}, nil
  >>
  ;

StartOr
  : OpenParen Pattern Pipe ContinueOr CloseParen <<
    &Pattern{Or: &Or{
      OpenParen: $0.(*Keyword),
      LeftPattern: $1.(*Pattern),
      Pipe: $2.(*Keyword),
      RightPattern: $3.(*Pattern),
      CloseParen: $4.(*Keyword),
    }}, nil
  >>
  ;

ContinueOr
  : Pattern
  | ContinueOr Pipe Pattern <<
    &Pattern{Or: &Or{
      LeftPattern: $0.(*Pattern),
      Pipe: $1.(*Keyword),
      RightPattern: $2.(*Pattern),
    }}, nil
  >>
  ;

StartAnd
  : OpenParen Pattern Ampersand ContinueAnd CloseParen <<
    &Pattern{And: &And{
      OpenParen: $0.(*Keyword),
      LeftPattern: $1.(*Pattern),
      Ampersand: $2.(*Keyword),
      RightPattern: $3.(*Pattern),
      CloseParen: $4.(*Keyword),
    }}, nil
  >>
  ;

ContinueAnd
  : Pattern
  | ContinueAnd Ampersand Pattern <<
    &Pattern{And: &And{
      LeftPattern: $0.(*Pattern),
      Ampersand: $1.(*Keyword),
      RightPattern: $2.(*Pattern),
    }}, nil
  >>
  ;

StartInterleave
  : OpenCurly Pattern SemiColon ContinueInterleave CloseCurly <<
    &Pattern{Interleave: &Interleave{
      OpenCurly: $0.(*Keyword),
      LeftPattern: $1.(*Pattern),
      SemiColon: $2.(*Keyword),
      RightPattern: $3.(*Pattern),
      CloseCurly: $4.(*Keyword),
    }}, nil
  >>
  | OpenCurly Pattern SemiColon ContinueInterleave SemiColon CloseCurly <<
    &Pattern{Interleave: &Interleave{
      OpenCurly: $0.(*Keyword),
      LeftPattern: $1.(*Pattern),
      SemiColon: $2.(*Keyword),
      RightPattern: $3.(*Pattern),
      ExtraSemiColon: $4.(*Keyword),
      CloseCurly: $5.(*Keyword),
    }}, nil
  >>
  ;

ContinueInterleave
  : Pattern
  | ContinueInterleave SemiColon Pattern <<
    &Pattern{Interleave: &Interleave{
      LeftPattern: $0.(*Pattern),
      SemiColon: $1.(*Keyword),
      RightPattern: $2.(*Pattern),
    }}, nil
  >>
  ;
